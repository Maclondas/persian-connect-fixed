import { useState } from 'react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Alert, AlertDescription } from './ui/alert';
import { ArrowLeft, Mail, Eye, EyeOff, Chrome } from 'lucide-react';
import { useLanguage } from './hooks/useLanguage';
import { realDataService } from './services/real-data-service';
import { simpleAuthService } from './simple-auth-service';
import { reliableAuthService } from './reliable-auth-service';
import { toast } from 'sonner';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Separator } from './ui/separator';
import DuplicatePreventionService from './duplicate-prevention-service';

interface NavigateFunction {
  (page: 'home' | 'login' | 'ad-detail' | 'post-ad' | 'messages' | 'chat' | 'admin' | 'my-ads', params?: { adId?: string; chatId?: string }): void;
}

interface LoginPageProps {
  onNavigate: NavigateFunction;
}

export function LoginPage({ onNavigate }: LoginPageProps) {
  const { t, isRTL } = useLanguage();
  const [isSignUp, setIsSignUp] = useState(false);
  const [signInData, setSignInData] = useState({ email: '', password: '' });
  const [signUpData, setSignUpData] = useState({ name: '', email: '', password: '', confirmPassword: '' });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const validateEmail = (email: string): boolean => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const validatePassword = (password: string): boolean => {
    return password.length >= 6;
  };

  // Quick admin login for testing
  const handleQuickAdminLogin = async () => {
    setError('');
    setLoading(true);
    
    try {
      console.log('🔧 Quick admin login for testing...');
      
      // Use reliable auth service for instant admin access
      const user = await reliableAuthService.quickAdminLogin();
      
      console.log('✅ Quick admin login successful:', user.email, 'Role:', user.role);
      toast.success(`Admin login successful! Welcome, ${user.name}`, {
        description: 'You now have full admin access for testing and debugging'
      });
      onNavigate('home');
      
    } catch (err: any) {
      console.error('❌ Quick admin login failed:', err);
      setError(`Admin login failed: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  // Quick test user login
  const handleQuickTestLogin = async () => {
    setError('');
    setLoading(true);
    
    try {
      console.log('🔧 Quick test user login...');
      
      // Use reliable auth service for instant test access
      const user = await reliableAuthService.quickTestLogin();
      
      console.log('✅ Quick test login successful:', user.email, 'Role:', user.role);
      toast.success(`Test login successful! Welcome, ${user.name}`, {
        description: 'Ready for testing marketplace features'
      });
      onNavigate('home');
      
    } catch (err: any) {
      console.error('❌ Quick test login failed:', err);
      setError(`Test login failed: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleSignIn = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);
    
    try {
      console.log('🔐 LoginPage: Starting reliable sign in process...');
      
      if (!signInData.email || !signInData.password) {
        setError('Please fill in all fields');
        setLoading(false);
        return;
      }

      if (!validateEmail(signInData.email)) {
        setError('Please enter a valid email address');
        setLoading(false);
        return;
      }

      // Use reliable auth service (no network dependencies)
      console.log('🛡️ LoginPage: Using reliable authentication...');
      const user = await reliableAuthService.signIn(signInData.email.trim(), signInData.password);
      
      console.log('✅ LoginPage: Reliable authentication successful for:', user.email, 'Role:', user.role);
      toast.success(`Welcome back, ${user.name}!`);
      onNavigate('home');
      
    } catch (err: any) {
      console.error('❌ LoginPage: Sign in error:', err);
      const errorMessage = err?.message || 'Sign in failed. Please check your credentials and try again.';
      console.error('❌ LoginPage: Error message:', errorMessage);
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleSignUp = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setLoading(true);
    
    try {
      if (!signUpData.name || !signUpData.email || !signUpData.password || !signUpData.confirmPassword) {
        setError('Please fill in all fields');
        setLoading(false);
        return;
      }

      if (!validateEmail(signUpData.email)) {
        setError('Please enter a valid email address');
        setLoading(false);
        return;
      }

      if (!validatePassword(signUpData.password)) {
        setError('Password must be at least 6 characters long');
        setLoading(false);
        return;
      }

      if (signUpData.password !== signUpData.confirmPassword) {
        setError('Passwords do not match');
        setLoading(false);
        return;
      }

      // 🔍 Check for duplicate email before creating account
      console.log('🔍 Checking for duplicate email before signup...');
      const duplicateCheck = await DuplicatePreventionService.checkEmailExists(signUpData.email.trim());
      
      if (duplicateCheck.hasDuplicates) {
        console.log('❌ Duplicate email found:', duplicateCheck.existingAccount);
        setError(`An account with this email already exists. Please sign in instead or use a different email address.`);
        setLoading(false);
        return;
      }

      console.log('✅ Email is available, proceeding with signup...');

      // Use reliable auth service for sign up
      console.log('🛡️ LoginPage: Using reliable authentication for sign up...');
      const user = await reliableAuthService.signUp({
        name: signUpData.name.trim(),
        email: signUpData.email.trim(),
        password: signUpData.password
      });
      
      console.log('✅ Reliable sign up successful for:', user.email, 'Role:', user.role);
      toast.success(`Welcome to Persian Connect, ${user.name}!`);
      onNavigate('home');
    } catch (err: any) {
      console.error('Sign up error:', err);
      
      // Provide helpful error messages based on the error type
      let errorMessage = err.message || 'Sign up failed. Please try again.';
      
      if (err.message && err.message.includes('Server not available')) {
        errorMessage = 'Server connection issue detected. Your account may have been created - please try signing in. If the issue persists, please contact support.';
      } else if (err.message && err.message.includes('Missing required fields')) {
        errorMessage = 'Please fill in all required fields (name, email, password).';
      } else if (err.message && err.message.includes('already exists')) {
        errorMessage = 'An account with this email already exists. Please sign in instead.';
      }
      
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    setError('');
    setLoading(true);
    
    try {
      console.log('🔘 Google sign-in button clicked');
      // Use Supabase's Google OAuth for real authentication
      const user = await realDataService.signInWithGoogle();
      
      if (user) {
        // Check if this is a demo user (when server is unavailable)
        if (user.id.includes('demo')) {
          console.log('🎭 Demo user created');
          toast.success(`Welcome ${user.name}! (Demo Mode)`);
        } else {
          console.log('✅ Real user authenticated');
          toast.success(`Welcome ${user.name}!`);
        }
        onNavigate('home');
      } else {
        // user is null - this means OAuth redirect is happening
        // The page will redirect to Google, so we don't need to do anything
        console.log('🔄 Redirecting to Google OAuth...');
        // Don't set loading to false here, as the page will redirect
        return;
      }
    } catch (err: any) {
      console.error('🔥 Google sign in error:', err);
      
      // Handle specific Google OAuth configuration error
      if (err.message && (err.message.includes('not configured') || 
                          err.message.includes('not enabled') ||
                          err.message.includes('Invalid provider') ||
                          err.message.includes('provider not enabled'))) {
        const errorMsg = 'Google sign-in is not properly configured. Please check the Supabase dashboard under Authentication > Providers > Google.';
        setError(errorMsg);
        toast.error('Google OAuth not configured properly.');
        console.log('💡 Fix: Enable Google provider in Supabase dashboard and add OAuth credentials');
      } else {
        setError(err.message || 'Google sign in failed. Please try again.');
        toast.error('Google sign-in failed');
      }
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setSignInData({ email: '', password: '' });
    setSignUpData({ name: '', email: '', password: '', confirmPassword: '' });
    setError('');
    setShowPassword(false);
    setShowConfirmPassword(false);
  };

  const toggleMode = () => {
    setIsSignUp(!isSignUp);
    resetForm();
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 to-secondary/5 flex items-center justify-center p-4" dir={isRTL ? 'rtl' : 'ltr'}>
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-4">
          <div className="flex items-center justify-between">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => onNavigate('home')}
              className="p-2"
            >
              <ArrowLeft className="w-4 h-4" />
            </Button>
            <div className="text-center">
              <div className="w-12 h-12 bg-primary rounded-full flex items-center justify-center mx-auto mb-2">
                <Mail className="w-6 h-6 text-white" />
              </div>
              <h1 className="text-2xl font-bold text-primary">Persian Connect</h1>
            </div>
            <div className="w-10"></div> {/* Spacer for centering */}
          </div>
          <div className="text-center">
            <CardTitle className="text-xl">
              {isSignUp ? 'Create Account' : 'Welcome Back'}
            </CardTitle>
            <p className="text-muted-foreground mt-2">
              {isSignUp 
                ? 'Join our marketplace community' 
                : 'Sign in to your account to continue'
              }
            </p>
          </div>
        </CardHeader>

        <CardContent className="space-y-6">
          {/* Real authentication - no demo mode */}

          {error && (
            <Alert variant="destructive">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          {/* Google Sign In Button */}
          <Button
            type="button"
            variant="outline"
            className="w-full h-12"
            onClick={handleGoogleSignIn}
            disabled={loading}
          >
            <Chrome className="w-5 h-5 mr-2" />
            Continue with Google
          </Button>

          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <Separator className="w-full" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-background px-2 text-muted-foreground">
                Or continue with email
              </span>
            </div>
          </div>

          {/* Email/Password Form */}
          <form onSubmit={isSignUp ? handleSignUp : handleSignIn} className="space-y-4">
            {isSignUp && (
              <div className="space-y-2">
                <label htmlFor="name" className="text-sm font-medium">
                  Full Name *
                </label>
                <Input
                  id="name"
                  type="text"
                  placeholder="Enter your full name"
                  value={signUpData.name}
                  onChange={(e) => setSignUpData(prev => ({ ...prev, name: e.target.value }))}
                  disabled={loading}
                  className="h-12"
                />
              </div>
            )}

            <div className="space-y-2">
              <label htmlFor="email" className="text-sm font-medium">
                Email Address *
              </label>
              <Input
                id="email"
                type="email"
                placeholder="Enter your email address"
                value={isSignUp ? signUpData.email : signInData.email}
                onChange={(e) => {
                  if (isSignUp) {
                    setSignUpData(prev => ({ ...prev, email: e.target.value }));
                  } else {
                    setSignInData(prev => ({ ...prev, email: e.target.value }));
                  }
                }}
                disabled={loading}
                className="h-12"
              />
            </div>

            <div className="space-y-2">
              <label htmlFor="password" className="text-sm font-medium">
                Password *
              </label>
              <div className="relative">
                <Input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  placeholder={isSignUp ? "Create a password (min. 6 characters)" : "Enter your password"}
                  value={isSignUp ? signUpData.password : signInData.password}
                  onChange={(e) => {
                    if (isSignUp) {
                      setSignUpData(prev => ({ ...prev, password: e.target.value }));
                    } else {
                      setSignInData(prev => ({ ...prev, password: e.target.value }));
                    }
                  }}
                  disabled={loading}
                  className="h-12 pr-10"
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="sm"
                  className="absolute right-0 top-0 h-12 px-3 py-2 hover:bg-transparent"
                  onClick={() => setShowPassword(!showPassword)}
                  disabled={loading}
                >
                  {showPassword ? (
                    <EyeOff className="h-4 w-4" />
                  ) : (
                    <Eye className="h-4 w-4" />
                  )}
                </Button>
              </div>
            </div>

            {isSignUp && (
              <div className="space-y-2">
                <label htmlFor="confirmPassword" className="text-sm font-medium">
                  Confirm Password *
                </label>
                <div className="relative">
                  <Input
                    id="confirmPassword"
                    type={showConfirmPassword ? "text" : "password"}
                    placeholder="Confirm your password"
                    value={signUpData.confirmPassword}
                    onChange={(e) => setSignUpData(prev => ({ ...prev, confirmPassword: e.target.value }))}
                    disabled={loading}
                    className="h-12 pr-10"
                  />
                  <Button
                    type="button"
                    variant="ghost"
                    size="sm"
                    className="absolute right-0 top-0 h-12 px-3 py-2 hover:bg-transparent"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    disabled={loading}
                  >
                    {showConfirmPassword ? (
                      <EyeOff className="h-4 w-4" />
                    ) : (
                      <Eye className="h-4 w-4" />
                    )}
                  </Button>
                </div>
              </div>
            )}

            <Button
              type="submit"
              className="w-full h-12 bg-primary hover:bg-primary/90"
              disabled={loading}
            >
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  {isSignUp ? 'Creating Account...' : 'Signing In...'}
                </>
              ) : (
                isSignUp ? 'Create Account' : 'Sign In'
              )}
            </Button>
          </form>

          <div className="text-center">
            <Button
              type="button"
              variant="link"
              onClick={toggleMode}
              disabled={loading}
              className="text-sm"
            >
              {isSignUp 
                ? 'Already have an account? Sign in here' 
                : "Don't have an account? Sign up here"
              }
            </Button>
          </div>

          {!isSignUp && (
            <>
              {/* Quick Login for Testing */}
              <div className="border-t pt-4">
                <div className="text-center mb-3">
                  <p className="text-xs text-muted-foreground mb-2">Testing & Debug Access</p>
                  <div className="space-y-2">
                    <Button
                      type="button"
                      variant="outline"
                      onClick={handleQuickAdminLogin}
                      disabled={loading}
                      className="w-full bg-orange-50 hover:bg-orange-100 border-orange-200 text-orange-700"
                    >
                      {loading ? (
                        <div className="flex items-center gap-2">
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-orange-600"></div>
                          Logging in...
                        </div>
                      ) : (
                      )}
                    </Button>
                    
                    <Button
                      type="button"
                      variant="outline"
                      onClick={handleQuickTestLogin}
                      disabled={loading}
                      className="w-full bg-blue-50 hover:bg-blue-100 border-blue-200 text-blue-700"
                    >
                      {loading ? (
                        <div className="flex items-center gap-2">
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                          Logging in...
                        </div>
                      ) : (
                      )}
                    </Button>
                    
                    <div className="flex gap-2">
                      <Button
                        type="button"
                        variant="ghost"
                        onClick={() => {
                          setSignInData({ email: 'ommzadeh@gmail.com', password: 'admin123' });
                          toast.info('Admin credentials filled in - guaranteed to work!');
                        }}
                        disabled={loading}
                        className="flex-1 text-xs"
                        size="sm"
                      >
                        Fill Admin
                      </Button>
                      
                      <Button
                        type="button"
                        variant="ghost"
                        onClick={() => {
                          setSignInData({ email: 'test@persianconnect.com', password: 'test123' });
                          toast.info('Test credentials filled in - guaranteed to work!');
                        }}
                        disabled={loading}
                        className="flex-1 text-xs"
                        size="sm"
                      >
                        Fill Test
                      </Button>
                    </div>
                  </div>
                  <p className="text-xs text-muted-foreground mt-2">
                    One-click access for testing and debugging purposes
                  </p>
                </div>
              </div>
              
              <div className="text-center">
                <Button
                  type="button"
                  variant="link"
                  onClick={() => {
                    // In a real app, this would navigate to password reset
                    toast.info('Password reset functionality will be available soon');
                  }}
                  disabled={loading}
                  className="text-xs text-muted-foreground"
                >
                  Forgot your password?
                </Button>
              </div>
            </>
          )}
        </CardContent>
      </Card>
    </div>
  );
}